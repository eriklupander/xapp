// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/filehandler/filehandler.go

// Package mock_filehandler is a generated GoMock package.
package mock_filehandler

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockFileHandler is a mock of FileHandler interface
type MockFileHandler struct {
	ctrl     *gomock.Controller
	recorder *MockFileHandlerMockRecorder
}

// MockFileHandlerMockRecorder is the mock recorder for MockFileHandler
type MockFileHandlerMockRecorder struct {
	mock *MockFileHandler
}

// NewMockFileHandler creates a new mock instance
func NewMockFileHandler(ctrl *gomock.Controller) *MockFileHandler {
	mock := &MockFileHandler{ctrl: ctrl}
	mock.recorder = &MockFileHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFileHandler) EXPECT() *MockFileHandlerMockRecorder {
	return m.recorder
}

// Write mocks base method
func (m *MockFileHandler) Write(dst string, data []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", dst, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Write indicates an expected call of Write
func (mr *MockFileHandlerMockRecorder) Write(dst, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockFileHandler)(nil).Write), dst, data)
}
