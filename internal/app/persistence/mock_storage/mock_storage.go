// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/persistence/storage.go

// Package mock_storage is a generated GoMock package.
package mock_storage

import (
	model "github.com/callistaenterprise/xapp/internal/app/model"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockDatabase is a mock of Database interface
type MockDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseMockRecorder
}

// MockDatabaseMockRecorder is the mock recorder for MockDatabase
type MockDatabaseMockRecorder struct {
	mock *MockDatabase
}

// NewMockDatabase creates a new mock instance
func NewMockDatabase(ctrl *gomock.Controller) *MockDatabase {
	mock := &MockDatabase{ctrl: ctrl}
	mock.recorder = &MockDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDatabase) EXPECT() *MockDatabaseMockRecorder {
	return m.recorder
}

// Persist mocks base method
func (m *MockDatabase) Persist(tweet model.Tweet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Persist", tweet)
	ret0, _ := ret[0].(error)
	return ret0
}

// Persist indicates an expected call of Persist
func (mr *MockDatabaseMockRecorder) Persist(tweet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Persist", reflect.TypeOf((*MockDatabase)(nil).Persist), tweet)
}

// ExistsByURL mocks base method
func (m *MockDatabase) ExistsByURL(url string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExistsByURL", url)
	ret0, _ := ret[0].(bool)
	return ret0
}

// ExistsByURL indicates an expected call of ExistsByURL
func (mr *MockDatabaseMockRecorder) ExistsByURL(url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExistsByURL", reflect.TypeOf((*MockDatabase)(nil).ExistsByURL), url)
}

// Close mocks base method
func (m *MockDatabase) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close
func (mr *MockDatabaseMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockDatabase)(nil).Close))
}

// Ping mocks base method
func (m *MockDatabase) Ping() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping")
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping
func (mr *MockDatabaseMockRecorder) Ping() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockDatabase)(nil).Ping))
}

// Migrate mocks base method
func (m *MockDatabase) Migrate() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Migrate")
}

// Migrate indicates an expected call of Migrate
func (mr *MockDatabaseMockRecorder) Migrate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Migrate", reflect.TypeOf((*MockDatabase)(nil).Migrate))
}
